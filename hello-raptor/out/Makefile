# This file is generated by Raptor's LabSDK. Do not edit it directly.
# Generated at 2023-03-12 23:43:05.424859
#
# Makefile utility for deploy Raptor artifacts to Kubernetes

MODEL_IMAGE_REPO_URI?=localhost
DOCKER_DEFAULT_PLATFORM?=linux/amd64
.DEFAULT_GOAL:=help

##@ General

.PHONY: help
help: _print_banner ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.PHONY: _print_banner
_print_banner:
	@printf '%b\n' "\033[38;5;97m                    █▀"
	@printf '%b\n' "\033[38;5;97m                  █▀  █▀"
	@printf '%b\n' "\033[38;5;97m▄               ██▀ ▄█▀  ▄"
	@printf '%b\n' "\033[38;5;97m █▄▄           ██▀ ▄█▀ ▄█▀"
	@printf '%b\n' "\033[38;5;97m   ▀▀██████████▄ █ ▄▄█▀"
	@printf '%b\n' "\033[38;5;97m    █▄        ███ █▀                                 ▄"
	@printf '%b\n' "\033[38;5;97m    ███      ███ ▀                                ▂▄██"
	@printf '%b\n' "\033[38;5;97m    ███     ████     ▄██▀▀▀████   ██ ▄█▀▀▀▀█▄    ▀███▀▀▀▀   ▄███▀▀▀███▄   █ ▄█▀▀▀▀"
	@printf '%b\n' "\033[38;5;97m    ███████████▎   ▄██▀     ▀██   ██▀      ▀██▄   ███      ███       ██▌  ██▀"
	@printf '%b\n' "\033[38;5;97m    ███     ▀███   ██▌      ▄██   ██▌       ██▀   ██       ██        ██   ██"
	@printf '%b\n' "\033[38;5;97m    ███      ▐██▄  ▀██▄   ▄▀███   ███     ▄██▀    ███       ███     ██    █▌"
	@printf '%b\n' "\033[38;5;97m    ███       ███▄   ▀▀██▀▀  ██   ███▀▀▀▀▀▀       ▀███▀       ▀████▀      █"
	@printf '%b\n' "\033[38;5;97m                                  ██▌"
	@printf '%b\n' "\033[38;5;97m                                  █▀"
	@printf '%b\n' "\033[0m"


##@ Helpers

.PHONY: show-envs
show-envs: _print_banner ## Show all environment variables that are available for configuring the generated YAML manifests
	@printf '%b\n' "The generated YAML manifests are configured using environment variables."
	@printf '%b\n' "You should set them before running the make commands."
	@printf '%b\n' ""
	@printf '%b\n' "\033[31mAvailable environment variables:\033[0m"
	@printf '%b\n' "\033[36mDOCKER_DEFAULT_PLATFORM\033[0m: Platform to use when building docker images. Default: linux/amd64"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${DOCKER_DEFAULT_PLATFORM}\033[0m"
	
	@printf '%b\n' "\033[36mAWS_REGION\033[0m: (OPTIONAL) AWS region. This is required if you want to automatically detect sagemaker image"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${AWS_REGION}\033[0m"
	@printf '%b\n' "\033[36mAWS_EXECUTION_ROLE_ARN\033[0m: (REQUIRED) AWS execution role ARN"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${AWS_EXECUTION_ROLE_ARN}\033[0m"
	@printf '%b\n' "\033[36mAWS_SERVERLESS_MAX_CONCURRENCY\033[0m: (OPTIONAL) AWS serverless max concurrency. If this is set,we'll create a serverless deployment."
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${AWS_SERVERLESS_MAX_CONCURRENCY}\033[0m"
	@printf '%b\n' "\033[36mAWS_SERVERLESS_MEMORY_SIZE_IN_MB\033[0m: (OPTIONAL) AWS serverless memory size in MB. If this is set,we'll create a serverless deployment."
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${AWS_SERVERLESS_MEMORY_SIZE_IN_MB}\033[0m"
	@printf '%b\n' "\033[36mAWS_INFERENCE_INSTANCE_TYPE\033[0m: (OPTIONAL) AWS inference instance type to use for the SageMaker endpoint. If not specified, we'll use serverless deployment."
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${AWS_INFERENCE_INSTANCE_TYPE}\033[0m"
	@printf '%b\n' "\033[36mMODEL_IMAGE_REPO_URI\033[0m: (REQUIRED) The URI for the model image repository(e.g. 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-model-repo)"
	@printf '%b\n' "    \033[33mcurrent value: \033[32m${MODEL_IMAGE_REPO_URI}\033[0m"


##@ All

.PHONY: all
all: _print_banner docker-build-models docker-push-models deploy ## Build docker images for all models, push them to the docker repository and deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"

deploy: _print_banner deploy-dsrcs deploy-features deploy-models ## Deploy all data-sources, features and models to Kubernetes
	@echo "Models and features deployed successfully"

all-ecr: _print_banner docker-build-models create-model-ecr-repos docker-ecr-push-models deploy-ecr ## Build docker images for all models, create ECR repos if not exists, push the images to the docker repository and deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"

.PHONY: deploy-ecr
deploy-ecr: _print_banner deploy-dsrcs deploy-features deploy-ecr-models ## Deploy all data-sources, features and models to Kubernetes
	@echo "Raptor resources deployed successfully"

##@ Data Sources

.PHONY: deploy-dsrcs
deploy-dsrcs: _print_banner deploy-dsrc-default-banktransaction  ## Deploy all data-sources to Kubernetes
	@echo "Data sources deployed successfully"


.PHONY: deploy-dsrc-default-banktransaction
deploy-dsrc-default-banktransaction: _print_banner ## Deploy default.banktransaction to Kubernetes
	@echo " → default.banktransaction: Deploying..."
	envsubst < /Users/kosisochukwuasuzu/Developer/gsoc/jina-ai/example/hello-raptor/out/datasource.default.banktransaction.yaml | kubectl apply -f -
	@echo "     → default.banktransaction: Deployed successfully"



##@ Features

.PHONY: deploy-features
deploy-features: _print_banner deploy-feat-default-total_spend  ## Deploy all features to Kubernetes
	@echo "Features deployed successfully"


.PHONY: deploy-feat-default-total_spend
deploy-feat-default-total_spend: _print_banner ## Deploy default.total_spend to Kubernetes
	@echo " → default.total_spend: Deploying..."
	envsubst < /Users/kosisochukwuasuzu/Developer/gsoc/jina-ai/example/hello-raptor/out/feature.default.total_spend.yaml | kubectl apply -f -
	@echo "     → default.total_spend: Deployed successfully"



##@ Models (All)

.PHONY: deploy-models
deploy-models: _print_banner deploy-model-default-amount_prediction  ## Deploy all models to Kubernetes
	@echo "Models deployed successfully"

.PHONY: docker-build
docker-build-models: _print_banner docker-build-model-default-amount_prediction  ## Build docker images for all models
	@echo "Docker images built successfully"

.PHONY: docker-push-models
docker-push-models: _print_banner docker-push-model-default-amount_prediction  ## Push docker images for all models
	@echo "Docker images pushed successfully"
.PHONY: create-model-ecr-repos
create-model-ecr-repos: _print_banner create-model-ecr-repo-default-amount_prediction  ## Create ECR repositories for all models if they don't exist
	@echo "ECR repositories created successfully"

.PHONY: docker-ecr-push-models
docker-ecr-push-models: _print_banner docker-ecr-push-model-default-amount_prediction  ## Push docker images for all models to ECR
	@echo "Docker images pushed successfully"

.PHONY: deploy-ecr-models
deploy-ecr-models: _print_banner deploy-ecr-model-default-amount_prediction  ## Deploy all models to Kubernetes
	@echo "Models deployed successfully"

##@ Models.PHONY: create-model-ecr-repo-default-amount_prediction
create-model-ecr-repo-default-amount_prediction: _print_banner ## Create ECR repository for default.amount_prediction if it doesn't exist
	@echo " → default.diabetes_prediction: Creating ECR repository:"
	aws ecr describe-repositories --repository-names default.amount_prediction  --query 'repositories[0].repositoryUri' --output text --no-cli-pager || aws ecr create-repository --repository-name "default.amount_prediction" --query 'repository.repositoryUri' --output text --no-cli-pager
	@echo "     → default.amount_prediction: ECR repository created successfully"

.PHONY: docker-push-model-to-ecr-default-amount_prediction
docker-ecr-push-model-default-amount_prediction: export MODEL_IMAGE_REPO_URI := $(shell aws ecr describe-repositories --repository-names default.amount_prediction --query 'repositories[0].repositoryUri' --output text --no-cli-pager)
docker-ecr-push-model-default-amount_prediction: _print_banner docker-push-model-default-amount_prediction ## Push docker image for default.amount_prediction to ECR

.PHONY: deploy-ecr-model-default-amount_prediction
deploy-ecr-model-default-amount_prediction: export MODEL_IMAGE_REPO_URI := $(shell aws ecr describe-repositories --repository-names default.amount_prediction --query 'repositories[0].repositoryUri' --output text --no-cli-pager)
deploy-ecr-model-default-amount_prediction: _print_banner deploy-model-default-amount_prediction ## Deploy default.amount_prediction to ECR.PHONY: docker-build-model-default-amount_prediction
docker-build-model-default-amount_prediction: _print_banner ## Build docker image for default.amount_prediction
	@echo " → default.amount_prediction: Building Docker image:"
	cd models/default.amount_prediction && docker build --platform ${DOCKER_DEFAULT_PLATFORM} -t default.amount_prediction:ugrehggbf6jswgqc -f env/docker/Dockerfile .
	@echo "     → default.amount_prediction: Docker image built successfully"

.PHONY: docker-push-model-default-amount_prediction
docker-push-model-default-amount_prediction: _print_banner ## Push default.amount_prediction docker image
	@echo " → default.amount_prediction: Pushing Docker image:"
	docker tag default.amount_prediction:ugrehggbf6jswgqc ${MODEL_IMAGE_REPO_URI}:ugrehggbf6jswgqc
	docker push ${MODEL_IMAGE_REPO_URI}:ugrehggbf6jswgqc
	@echo "     → default.amount_prediction: Docker image pushed successfully"

.PHONY: deploy-model-default-amount_prediction
deploy-model-default-amount_prediction: _print_banner ## Deploy default.amount_prediction to Kubernetes
	@echo " → default.amount_prediction: Deploying:"
	envsubst < /Users/kosisochukwuasuzu/Developer/gsoc/jina-ai/example/hello-raptor/out/model.default.amount_prediction.yaml | kubectl apply -f -
	@echo "     → default.amount_prediction: Deployed successfully"
