# Generated by Raptor's LabSDK
apiVersion: k8s.raptor.ml/v1alpha1
kind: Model
metadata:
  name: amount-prediction
  namespace: default
  labels: {}
  annotations:
    a8r.io/description: ''
spec:
  freshness: 1h
  staleness: 100h
  timeout: 1s
  features:
  - default.total_spend+sum
  keyFeature: null
  labels:
  - default.amount
  keys:
  - customer_id
  modelFramework: 'sklearn'
  modelFrameworkVersion: 1.2.2
  modelServer: 'sagemaker-ack'
  inferenceConfig:
  - name: region
    value: $AWS_REGION
  - name: executionRoleARN
    value: $AWS_EXECUTION_ROLE_ARN
  - name: serverlessMaxConcurrency
    value: $AWS_SERVERLESS_MAX_CONCURRENCY
  - name: serverlessMemorySizeInMB
    value: $AWS_SERVERLESS_MEMORY_SIZE_IN_MB
  - name: instanceType
    value: $AWS_INFERENCE_INSTANCE_TYPE
  storageURI: null
  modelImage: $MODEL_IMAGE_REPO_URI:ugrehggbf6jswgqc
  trainingCode: |
    @model(
      keys='customer_id',
      input_features=['total_spend+sum'],
      input_labels=[amount],
      model_framework='sklearn',
      model_server='sagemaker-ack',
    )
    @freshness(max_age='1h', max_stale='100h')
    def amount_prediction(ctx: TrainingContext):
      from sklearn.linear_model import LinearRegression
      df = ctx.features_and_labels()
      trainer = LinearRegression()
      trainer.fit(df[ctx.input_features], df[ctx.input_labels])
      return trainer
